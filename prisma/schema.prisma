// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String
  image         String?
  accounts      Account[]
  member        Member?

  @@map("users")
}

model Member {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  gender      String
  dateOfBirth DateTime @map("date_of_birth")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  description String
  city        String
  country     String
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]

  sourceLikes Like[] @relation("source")
  targetLikes Like[] @relation("target")

  senderMessages    Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")

  @@map("members")
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String? @map("public_id")

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
  @@map("likes")
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now()) @map("created_at")

  senderId String?
  sender   Member? @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)

  recipientId String?
  recepient   Member? @relation("recipient", fields: [recipientId], references: [id], onDelete: SetNull)

  dateRead         DateTime? @map("date_read")
  senderDeleted    Boolean   @default(false) @map("sender_deleted")
  recipientDeleted Boolean   @default(false) @map("recipient_deleted")

  @@map("messages")
}
